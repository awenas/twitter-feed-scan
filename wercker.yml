#Use OpenJDK base docker image from dockerhub and open the application port on the docker container
box:
  id: openjdk
  ports:
    - $PORT


#Build our application using Maven, just as we always have
build:
  steps:
    - install-packages:
        packages: maven
    - script:
        name: maven build
        code: mvn clean assembly:assembly

        
#Push the docker image with our built and tested application to the Oracle Container Registry
push-release:
  steps:
    - internal/docker-push:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        repository: $DOCKER_REPO
        registry: $DOCKER_REGISTRY
        tag: $WERCKER_GIT_COMMIT
        working-dir: /pipeline/source
        ports: $PORT
        cmd: sh target/bin/start
        
scan:      
  docker: true
  services:
  - id: arminc/clair-db
    tag: 2017-09-18
    name: postgres
  - id: arminc/clair-local-scan
    tag: v2.0.1
    name: clair
  steps:
  - script:
    name: Install clair-scanner and pre-reqs
    code: |
      apt-get update
      apt-get install -y curl docker.io
      curl -L -O https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64 
      mv clair-scanner_linux_amd64 clair-scanner
      chmod +x clair-scanner
  - script:
    name: Scan an image
    code: |
      docker pull ${DOCKER_REPO}:${WERCKER_GIT_COMMIT}
      ./clair-scanner --ip=`hostname -i` --report="report.json" --clair="http://clair:6060" ${DOCKER_REPO}:${WERCKER_GIT_COMMIT} 
      cat report.json
      OK=`grep "\"vulnerabilities\": \[\]" report.json | wc -l`
      echo $OK
      if [ "$OK" == "1" ]; then 
        echo "image was clean, continuing..."
      else
        echo "image had vulnerability, aborting"
        exit 1
      fi        
        
#Deploy our container from the Oracle Container Registry to the Oracle Container Engine (Kubernetes)
deploy-to-cluster:
  box:
      id: alpine
      cmd: /bin/sh
  steps:

  - bash-template

  - script:
      name: "Visualise Kubernetes config"
      code: cat kubernetes.yml

  - kubectl:
      name: apply namespace    
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_TOKEN
      insecure-skip-tls-verify: true
      command: apply -f ./ns.yml
  - kubectl:
      name: delete OCR secret
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_TOKEN
      insecure-skip-tls-verify: true
      command: delete secret okeworkshop --namespace=$NS --ignore-not-found=true
  - kubectl:
      name: create OCR secret
      server: $KUBERNETES_SERVER
      token: $KUBERNETES_TOKEN
      insecure-skip-tls-verify: true
      command: create secret docker-registry okeworkshop --docker-server=iad.ocir.io --docker-username=$DOCKER_USERNAME --docker-password="$DOCKER_PASSWORD" --docker-email=${WERCKER_APPLICATION+OWNER_NAME}@mail.com --namespace="$NS"
  - kubectl:
      name: deploy to kubernetes
      server: $KUBERNETES_MASTER
      token: $KUBERNETES_TOKEN
      insecure-skip-tls-verify: true
      command: apply -f ./kubernetes.yml --namespace=$NS
